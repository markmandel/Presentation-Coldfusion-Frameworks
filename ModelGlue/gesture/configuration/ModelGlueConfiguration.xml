<beans>

<bean id="modelglue.ModelGlue" class="ModelGlue.gesture.MemoizedModelGlue">
	<!-- 
		Configuration to use.
		
		This should be defined in your application's local ColdSpring.xml file.
		
		If it's not, the definition provided later in this file will be used instead.
	-->
	<property name="modelGlueConfiguration">
		<ref bean="modelGlue.ModelGlueConfiguration" />
	</property>
	
	<!--
		Array of Populators.  These populate the event values from form, url, etc.
		
		Values are populated in the order defined:  last populator values overwrite prior!
	-->
	<property name="eventPopulators">
		<ref bean="modelglue.PopulatorList" factory-method="getObject" />
	</property>
	
	<!-- Event Context creation is bottlenecked through a factory to allow for proper configuration and testing -->
	<property name="eventContextFactory">
		<ref bean="modelglue.eventContextFactory"/>
	</property>
	
		
	<property name="scaffoldManager">
		<ref bean="modelglue.scaffoldManager" />
	</property>
	
	<!--
		Array of EventRequestPhase implementations.
		These will be executed in the order defined.
	-->
	<property name="requestPhases">
		<ref bean="modelglue.PhaseList" factory-method="getObject" />
	</property>
	
	<!-- Bean Populator to use -->
	<property name="beanPopulator">
		<ref bean="modelglue.beanPopulator" />
	</property>

	<!-- IoC Adapter to use -->
	<property name="iocAdapter">
		<ref bean="modelglue.iocAdapter" />
	</property>

	<!-- Cache Adapter to use -->
	<property name="cacheAdapter">
		<ref bean="modelglue.cacheAdapter" />
	</property>

	<!-- 
		View Renderer to use.
	-->
	<property name="viewRenderer">
		<ref bean="modelglue.viewRenderer" />
	</property>

	<!-- 
		Asset Manager to use.
	-->
	<property name="assetManager">
		<ref bean="modelglue.assetManager" />
	</property>

	<!-- 
		State Persister to use
	-->
	<property name="statePersister">
		<ref bean="modelglue.statePersister" />
	</property>

	<!-- 
		Log Writer to use
	-->
	<property name="logWriter">
		<ref bean="modelglue.logWriter" />
	</property>
	
	<!-- 
		Log Renderer to use
	-->
	<property name="logRenderer">
		<ref bean="modelglue.logRenderer" />
	</property>
	
		<!-- 
		Validation Service to use
	-->
	<property name="validationService">
		<ref bean="modelglue.validationService" />
	</property>
</bean>

<!-- Note: this is a template bean definition for use as a parent to other bean definitions. It should never be instantiated! -->
<bean id="modelglue.AbstractRequestPhase" abstract="true">
	<constructor-arg name="moduleLoaderFactory">
		<ref bean="modelglue.ModuleLoaderFactory" />
	</constructor-arg>
</bean>

<bean id="modelglue.InitializationPhase" class="ModelGlue.gesture.eventrequest.phase.Initialization" parent="modelglue.AbstractRequestPhase">
	<constructor-arg name="modules">
		<list>
			<value>/ModelGlue/gesture/modules/internal/initialization/config/initialization.xml</value>
			<value>/ModelGlue/gesture/modules/orm/config/ModelGlue.xml</value>
		</list>
	</constructor-arg>
</bean>
	
<bean id="modelglue.PopulationPhase" class="ModelGlue.gesture.eventrequest.phase.Population" parent="modelglue.AbstractRequestPhase">
	<constructor-arg name="modules">
		<list>
			<value>/ModelGlue/gesture/modules/internal/population/config/population.xml</value>
			<value>/ModelGlue/gesture/modules/internal/generation/config/generation.xml</value>
			<value>/ModelGlue/gesture/modules/asset/config/asset.xml</value>
		</list>
	</constructor-arg>
</bean>

<bean id="modelglue.ConfigurationPhase" class="ModelGlue.gesture.eventrequest.phase.Configuration" parent="modelglue.AbstractRequestPhase">
	<constructor-arg name="modules">
		<list>
			<value>/ModelGlue/gesture/modules/internal/configuration/config/configuration.xml</value>
			<value>/ModelGlue/gesture/modules/internal/utility/config/utility.xml</value>
			<value>/ModelGlue/gesture/modules/scaffold/config/scaffolding.xml</value>
		</list>
	</constructor-arg>
</bean>
	
<bean id="modelglue.InvocationPhase" class="ModelGlue.gesture.eventrequest.phase.Invocation" parent="modelglue.AbstractRequestPhase">
	<constructor-arg name="modules">
		<list>
			<value>/ModelGlue/gesture/modules/internal/invocation/config/invocation.xml</value>
		</list>
	</constructor-arg>
</bean>
	
<bean id="modelglue.PhaseList" class="coldspring.beans.factory.config.ListFactoryBean">
	<property name="SourceList">
		<!--
			Array of EventRequestPhase implementations.
			These will be executed in the order defined.
		-->
		<list>
			<ref bean="modelglue.InitializationPhase" />
			<ref bean="modelglue.PopulationPhase" />
			<ref bean="modelglue.ConfigurationPhase" />
			<ref bean="modelglue.InvocationPhase" />
			<!-- Haven't found a use for it.
			<bean class="ModelGlue.gesture.eventrequest.phase.Termination" />
			-->
		</list>
	</property>
</bean>

<bean id="modelglue.PopulatorList" class="coldspring.beans.factory.config.ListFactoryBean">
	<property name="SourceList">
		<list>
			<!-- Low-level bootstraps use request. -->
			<ref bean="modelGlue.requestPopulator" />
			<ref bean="modelGlue.urlPopulator" />
			<ref bean="modelGlue.formPopulator" />
		</list>
	</property>
</bean>

<!-- 
	Injector that performs "beans"-scope injection and autowiring for controllers and helper components.
-->
<bean id="modelglue.beanInjector" class="ModelGlue.gesture.externaladapters.beaninjection.ColdSpringBeanInjector" />

<!--
	Factory responsible for creating ModuleLoader implementations.
	
	If you wanted to define your own type of module loader, such as one
	that loaded controllers / event handlers from a database, you can implement
	it and register it here.
-->
<bean id="modelglue.ModuleLoaderFactory" class="ModelGlue.gesture.module.XMLModuleLoaderFactory">
	<constructor-arg name="modelGlueConfiguration"><ref bean="modelglue.modelGlueConfiguration" /></constructor-arg>
	<constructor-arg name="registeredClasses">
		<map>
			<entry key="XML">
				<map><entry key="class"><value>ModelGlue.gesture.module.XMLModuleLoader</value></entry></map>
			</entry>
		</map>
	</constructor-arg>
</bean>

<!--
	Factory responsible for creating EventHandler implementations.

	If you wanted to define your own type of event handler, you can implement
	it.  It need not be registered here:  simply calling the create() method
	with the type name will instantiate it.  See TypeDefaultingMapBasedFactory.
-->
<bean id="modelglue.EventHandlerFactory" class="ModelGlue.gesture.factory.TypeDefaultingMapBasedFactory">
	<constructor-arg name="createSingletons">
		<value>false</value>
	</constructor-arg>
	<constructor-arg name="registeredClasses">
		<map>
			<entry key="EventHandler">
				<map>
					<entry key="class"><value>ModelGlue.gesture.eventhandler.EventHandler</value></entry>
				</map>
			</entry>
		</map>
	</constructor-arg>
</bean>

<!--
	Default URL manager to use.
-->
<bean id="modelglue.UrlManager" class="ModelGlue.gesture.eventrequest.url.UrlManager">
	<property name="modelGlue">
		<ref bean="modelglue.ModelGlue" />
	</property>
</bean>
	
<!--
	URL Populator to use.
-->
<bean id="modelGlue.urlPopulator" class="ModelGlue.gesture.eventrequest.population.UrlPopulator">
	<property name="urlManager">
		<ref bean="modelglue.UrlManager" />
	</property>
</bean>

<!--
	Form Populator to use.
-->
<bean id="modelGlue.formPopulator" class="ModelGlue.gesture.eventrequest.population.FormPopulator" />

<!--
	Request Populator to use.
-->
<bean id="modelGlue.requestPopulator" class="ModelGlue.gesture.eventrequest.population.RequestPopulator" />

<!--
	Bean Populator to use (fuels makeEventBean())
-->
<bean id="modelGlue.beanPopulator" class="ModelGlue.gesture.externaladapters.beanpopulation.CollectionBeanPopulator" />
	
<!--
	Session facade
-->
<bean id="modelglue.sessionFacade" class="ModelGlue.gesture.externaladapters.session.AdobeColdFusionSessionFacade" />

<!--
	IoC Adapter to use
-->
<bean id="modelGlue.iocAdapter" class="ModelGlue.gesture.externaladapters.ioc.ColdSpringAdapter" />

<!--
	Cache Adapter to use
-->
<bean id="modelGlue.cacheAdapter" class="ModelGlue.gesture.externaladapters.contentcaching.SimpleTimedCache">
	<constructor-arg name="sweepInterval"><value>10</value></constructor-arg>
</bean>

<!--
	View renderer
-->
<bean id="modelglue.viewRenderer" class="ModelGlue.gesture.view.ViewRenderer">
	<property name="modelGlue">
		<ref bean="modelglue.ModelGlue" />
	</property>
</bean>

<!--
	Asset manager
-->
<bean id="modelglue.assetManager" class="ModelGlue.gesture.modules.asset.manager.AssetManager">
	<constructor-arg name="Templates">
		<map>
		<entry key="CSS">
			<value><![CDATA[<link type="text/css" rel="stylesheet" media="all" href="{{path}}" />]]></value>
		</entry>
		<entry key="IECSS">
			<value><![CDATA[<!--[if lte ie 8]><link type="text/css" rel="stylesheet" media="all" href="{{path}}" /><![endif]-->]]></value>
		</entry>
		<entry key="JS">
			<value><![CDATA[<script type="text/javascript" src="{{path}}"></script>]]></value>
		</entry>
		<!-- if you don't want a comment to appear in the html when an asset is not found, pass an empty string here  -->
		<entry key="ASSETNOTFOUND">
			<value><![CDATA[<!--ERROR: AssetManager could not locate asset {{path}} -->]]></value>
		</entry>
			
		</map>
	</constructor-arg>
	<constructor-arg name="AssetHosts">
		<list>
			<!-- list your asset domains here eg: <value>http://static1.mydomain.com</value> -->
		</list>
	</constructor-arg>
	<!-- In dev you'll probably want this the same as above. In production this will probably be a single host unless you have
		 a wildcard ssl certificate, eg *.mydomain.com	-->
	<constructor-arg name="AssetHostsSSL">
		<list>
			<!-- as above, but for ssl -->
		</list>
	</constructor-arg>
	<property name="modelGlue">
		<ref bean="modelglue.ModelGlue" />
	</property>
</bean>


<!--
	State persister
-->
<bean id="modelglue.statePersister" class="ModelGlue.gesture.eventrequest.statepersistence.SessionBasedStatePersister">
	<constructor-arg name="sessionFacade"><ref bean="modelglue.sessionFacade" /></constructor-arg>
</bean>

<!--
	Helper injector
-->
<bean id="modelglue.helperInjector" class="ModelGlue.gesture.helper.HelperInjector">
	<property name="beanInjector"><ref bean="modelglue.beanInjector" /></property>
</bean>

<!--
	Event generator & configuration (does the creation of controllers, event-handler XML, etc. bits)
-->
<bean id="modelglue.eventGenerator" class="ModelGlue.gesture.modules.internal.generation.service.XMLEventGenerationService">
	<constructor-arg name="modelglue"><ref bean="modelglue.ModelGlue" /></constructor-arg>
</bean>
<bean id="modelglue.eventGeneratorConfig" class="coldspring.beans.factory.config.MapFactoryBean">
	<property name="SourceMap">
		<map>
			<entry key="eventType"><value>templatedPage</value></entry>
			<entry key="generateView"><value>true</value></entry>
			<entry key="viewLocationFunction"><value>listFirst(eventName, ".")</value></entry>
			<entry key="viewLocationPrefix"><value></value></entry>
			<entry key="viewLocationSuffix"><value></value></entry>
			<entry key="viewFileFunction"><value>listLast(eventName, ".")</value></entry>
			<entry key="viewFilePrefix"><value></value></entry>
			<entry key="viewFileSuffix"><value>.cfm</value></entry>
			<entry key="generateMessageListener"><value>true</value></entry>
			<entry key="controllerFileFunction"><value>uCase(left(listFirst(eventName, "."), 1)) &amp; right(listFirst(eventName, "."), len(listFirst(eventName, ".")) - 1)</value></entry>
			<entry key="controllerFilePrefix"><value></value></entry>
			<entry key="controllerFileSuffix"><value>Controller.cfc</value></entry>
			<entry key="messageListenerFunction"><value>listLast(eventName, ".")</value></entry>
			<entry key="messageListenerPrefix"><value></value></entry>
			<entry key="messageListenerSuffix"><value></value></entry>
			<entry key="resultEvent"><value></value></entry>
			<entry key="resultRedirect"><value>true</value></entry>
		</map>
	</property>
</bean>

<!--
	Validation Service used by ORMAdapter. Can be overridden
-->
<bean id="modelglue.ValidationService" class="ModelGlue.gesture.modules.orm.ValidationService">
	<property name="framework"><ref bean="modelglue.ModelGlue" /></property>
</bean>

<!-- 
	Renderer that renders the ModelGlue Log.
-->
<bean id="modelglue.logRenderer" class="ModelGlue.gesture.eventrequest.log.LogRenderer" />

	
<bean id="modelglue.eventContextFactory" class="ModelGlue.gesture.eventrequest.EventContextFactory">
	<property name="modelGlue"><ref bean="modelglue.ModelGlue"/></property>
	<property name="statePersister"><ref bean="modelglue.statePersister"/></property>
	<property name="viewRenderer"><ref bean="modelglue.viewRenderer"/></property>
	<property name="beanPopulator"><ref bean="modelglue.beanPopulator"/></property>
	<property name="logWriter"><ref bean="modelglue.logWriter"/></property>
	<property name="objectPath"><value>ModelGlue.gesture.eventrequest.EventContext</value></property>
</bean>	
<!-- 
	Writer that writes the that renders the ModelGlue Log.
-->
<bean id="modelglue.logWriter" class="ModelGlue.gesture.eventrequest.log.LogWriter">
	<constructor-arg name="debugMode"><bean factory-bean="modelglue.modelGlueConfiguration" factory-method="getDebug" /></constructor-arg>
</bean>		
	
<!--
	ScaffoldManager (does the creation of scaffold bits)
-->

<!-- Scaffold manager beans should use this template as a parent -->
<bean id="modelglue.scaffoldManager.template" class="ModelGlue.gesture.modules.scaffold.ScaffoldManager">
	<constructor-arg name="modelGlueConfiguration"><ref bean="modelglue.modelGlueConfiguration" /></constructor-arg>
	<property name="modelGlue"><ref bean="modelglue.ModelGlue" /></property>
</bean>

<!-- Plain scaffolding (default)-->

<bean id="modelglue.scaffoldManager" parent="modelglue.scaffoldManager.template">
	<constructor-arg name="scaffoldCustomTagMappingsList">
		<list>
				<ref bean="modelglue.scaffoldCustomTagMappings.plain" />
		</list>
	</constructor-arg>
	<constructor-arg name="scaffoldBeanRegistryList">
		<list>
				<ref bean="modelglue.scaffoldBeanRegistry.plain" />
		</list>
	</constructor-arg>	
</bean>

<bean id="modelglue.scaffoldCustomTagMappings.plain" class="coldspring.beans.factory.config.MapFactoryBean">
	<property name="SourceMap">
		<map>
			<entry key="mg">
				<value>/ModelGlue/gesture/modules/scaffold/customtags/plain/</value>
			</entry>
		</map>
	</property>
</bean>

<bean id="modelglue.scaffoldBeanRegistry.plain" class="coldspring.beans.factory.config.MapFactoryBean">
	<property name="SourceMap">
		<map>
			<entry key="Commit">
				<map>
					<entry key="class"><value>ModelGlue.gesture.modules.scaffold.beans.plain.Commit</value></entry>
					<event key="hasXMLGeneration"><value>true</value></event>
					<event key="hasViewGeneration"><value>false</value></event>
				</map>
			</entry>
			<entry key="Delete">
				<map>
					<entry key="class"><value>ModelGlue.gesture.modules.scaffold.beans.plain.Delete</value></entry>
					<event key="hasXMLGeneration"><value>true</value></event>
					<event key="hasViewGeneration"><value>false</value></event>
				</map>
			</entry>
			<entry key="Edit">
				<map>
					<entry key="class"><value>ModelGlue.gesture.modules.scaffold.beans.plain.Edit</value></entry>
					<entry key="templatePath"><value>/ModelGlue/gesture/modules/scaffold/templates/plain/Edit.cfm</value></entry>
					<event key="hasXMLGeneration"><value>true</value></event>
					<event key="hasViewGeneration"><value>true</value></event>
					<entry key="prefix"><value>Form.</value></entry>
					<entry key="suffix"><value>.cfm</value></entry>
				</map>
			</entry>
			<entry key="List">
				<map>
					<entry key="class"><value>ModelGlue.gesture.modules.scaffold.beans.plain.List</value></entry>
					<entry key="templatePath"><value>/ModelGlue/gesture/modules/scaffold/templates/plain/List.cfm</value></entry>
					<event key="hasXMLGeneration"><value>true</value></event>
					<event key="hasViewGeneration"><value>true</value></event>
					<entry key="prefix"><value>List.</value></entry>
					<entry key="suffix"><value>.cfm</value></entry>
				</map>
			</entry>
			<entry key="View">
				<map>
					<entry key="class"><value>ModelGlue.gesture.modules.scaffold.beans.plain.View</value></entry>
					<entry key="templatePath"><value>/ModelGlue/gesture/modules/scaffold/templates/plain/View.cfm</value></entry>
					<event key="hasXMLGeneration"><value>true</value></event>
					<event key="hasViewGeneration"><value>true</value></event>
					<entry key="prefix"><value>Display.</value></entry>
					<entry key="suffix"><value>.cfm</value></entry>
				</map>
			</entry>
		</map>
	</property>
</bean>

<!-- Fancy scaffolding -->

<bean id="modelglue.scaffoldManager.fancy" parent="modelglue.scaffoldManager.template">
	<constructor-arg name="scaffoldCustomTagMappingsList">
		<list>
				<ref bean="modelglue.scaffoldCustomTagMappings.fancy" />
		</list>
	</constructor-arg>	
	<constructor-arg name="scaffoldBeanRegistryList">
		<list>
				<ref bean="modelglue.scaffoldBeanRegistry.plain" />
				<ref bean="modelglue.scaffoldBeanRegistry.fancy" />
		</list>
	</constructor-arg>	
</bean>

<bean id="modelglue.scaffoldCustomTagMappings.fancy" class="coldspring.beans.factory.config.MapFactoryBean">
	<property name="SourceMap">
		<map>
			<entry key="mg">
				<value>/ModelGlue/gesture/modules/scaffold/customtags/fancy/</value>
			</entry>
			<entry key="uform">
				<value>/modelglueextensions/cfuniform/tags/forms/cfUniForm/</value>
			</entry>
		</map>
	</property>
</bean>

<bean id="modelglue.scaffoldBeanRegistry.fancy" class="coldspring.beans.factory.config.MapFactoryBean">
	<property name="SourceMap">
		<map>
			<entry key="Edit">
				<map>
					<entry key="class"><value>ModelGlue.gesture.modules.scaffold.beans.fancy.Edit</value></entry>
					<entry key="templatePath"><value>/ModelGlue/gesture/modules/scaffold/templates/fancy/Edit.cfm</value></entry>
				</map>
			</entry>
			<entry key="List">
				<map>
					<entry key="class"><value>ModelGlue.gesture.modules.scaffold.beans.fancy.List</value></entry>
					<entry key="templatePath"><value>/ModelGlue/gesture/modules/scaffold/templates/fancy/List.cfm</value></entry>
				</map>
			</entry>
			<entry key="View">
				<map>
					<entry key="class"><value>ModelGlue.gesture.modules.scaffold.beans.fancy.View</value></entry>
					<entry key="templatePath"><value>/ModelGlue/gesture/modules/scaffold/templates/fancy/View.cfm</value></entry>
				</map>
			</entry>
    </map>
	</property>
</bean>

<bean id="CFUniFormConfigBean" class="coldspring.beans.factory.config.MapFactoryBean">
	<property name="SourceMap">
		<map>
			<entry key="loadDateUI"><value>true</value></entry>
			<entry key="dateSetup">
				<map>
					<entry key="buttonImage"><value>'/modelglueextensions/cfuniform/commonassets/images/uni-form/calendar.png'</value></entry>
				</map>
			</entry>
			<entry key="loadTimeUI"><value>true</value></entry>
			<entry key="timeSetup">
				<map>
					<entry key="show24Hours"><value>true</value></entry>
					<entry key="showSeconds"><value>false</value></entry>
					<entry key="spinnerImage"><value>'/modelglueextensions/cfuniform/commonassets/images/spinnerDefault.png'</value></entry>
				</map>
			</entry>
			<entry key="loadMaskUI"><value>true</value></entry>
			<entry key="loadTextareaResize"><value>true</value></entry>
			<entry key="textareaSetup">
				<map>
					<entry key="maxHeight"><value>800</value></entry>
					<entry key="animate"><value>true</value></entry>
					<entry key="animationSpeed"><value>'slow'</value></entry>
				</map>
			</entry>
			<entry key="pathConfig">
				<map>
					<entry key="jQuery"><value>/modelglueextensions/cfuniform/commonassets/scripts/jQuery/jquery-1.3.2.min.js</value></entry>
					<entry key="renderer"><value>/modelglueextensions/cfuniform/tags/forms/renderValidationErrors.cfm</value></entry>
					<entry key="uniformCSS"><value>/modelglueextensions/cfuniform/commonassets/css/uni-form.css</value></entry>
					<entry key="uniformCSSie"><value>/modelglueextensions/cfuniform/commonassets/css/uni-form-ie.css</value></entry>
					<entry key="uniformJS"><value>/modelglueextensions/cfuniform/commonassets/scripts/jQuery/forms/uni-form.jquery.js</value></entry>
					<entry key="validationJS"><value>/modelglueextensions/cfuniform/commonassets/scripts/jQuery/forms/jquery.validate-1.6.0.min.js</value></entry>
					<entry key="dateCSS"><value>/modelglueextensions/cfuniform/commonassets/css/datepick/jquery.datepick.css</value></entry>
					<entry key="dateJS"><value>/modelglueextensions/cfuniform/commonassets/scripts/jQuery/forms/jquery.datepick-3.7.5.min.js</value></entry>
					<entry key="timeCSS"><value>/modelglueextensions/cfuniform/commonassets/css/jquery.timeentry.css</value></entry>
					<entry key="timeJS"><value>/modelglueextensions/cfuniform/commonassets/scripts/jQuery/forms/jquery.timeentry-1.4.6.min.js</value></entry>
					<entry key="maskJS"><value>/modelglueextensions/cfuniform/commonassets/scripts/jQuery/forms/jquery.maskedinput-1.2.2.min.js</value></entry>
					<entry key="textareaJS"><value>/modelglueextensions/cfuniform/commonassets/scripts/jQuery/forms/jquery.prettyComments-1.4.pack.js</value></entry>
					<entry key="ratingCSS"><value>/modelglueextensions/cfuniform/commonassets/css/jquery.rating.css</value></entry>
					<entry key="ratingJS"><value>/modelglueextensions/cfuniform/commonassets/scripts/jQuery/forms/jquery.rating-3.12.min.js</value></entry>
				</map>
			</entry>
		</map>
	</property>
</bean>

<!-- Reactor adapter/service -->
<bean id="ormAdapter.Reactor" class="ModelGlue.unity.orm.ReactorAdapter">
	<constructor-arg name="framework"><ref bean="modelglue.ModelGlue" /></constructor-arg>
	<constructor-arg name="reactor"><ref bean="ormService.Reactor" /></constructor-arg>
</bean>
<bean id="ormService.Reactor" class="reactor.reactorFactory">
	<constructor-arg name="configuration"><ref bean="reactorConfiguration" /></constructor-arg>
</bean>


<!-- Transfer adapter/service -->
<bean id="ormAdapter.Transfer" class="ModelGlue.unity.orm.transfer.TransferAdapter">
	<constructor-arg name="framework"><ref bean="modelglue.ModelGlue" /></constructor-arg>
	<constructor-arg name="transfer"><ref bean="ormService.Transfer" /></constructor-arg>
</bean>

<bean id="ormService.Transfer" class="transfer.TransferFactory">
	 <constructor-arg name="configuration"><ref bean="transferConfiguration" /></constructor-arg>
</bean>

<!-- CF9/ORM adapter/service -->
<bean id="ormAdapter.cfORM" class="ModelGlue.gesture.modules.orm.cform.cfORMAdapter">
	<constructor-arg name="framework"><ref bean="modelglue.ModelGlue" /></constructor-arg>
	<constructor-arg name="ormService"><ref bean="ormService.cfORM" /></constructor-arg>
</bean>

<bean id="ormService.cfORM" class="ModelGlue.gesture.modules.orm.cform.cfORMService">
	 <!-- <constructor-arg name="configuration"><ref bean="cformConfiguration" /></constructor-arg> -->
</bean>

</beans>